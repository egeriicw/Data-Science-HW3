ma.knn <- merge(query_list, ma.apts)
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE)],query_list[which(query_list$matched==TRUE)])
dim(ma.apts[which(query_list$matched==TRUE)])
dim(ma.apts[which(query_list$matched==TRUE)])
dim(ma.apts[which(query_list$matched==TRUE),])
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
query_list[1,]
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built,latitude, longitude)
View(ma.knn)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.apts$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:10){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
for (k in 1:20){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
for (k in 1:20){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:20),err_rate)
err_rate <-as.data.frame(err_rate)
xtable(err_rate)
err_rate <- NULL
for (k in 1:20){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:20),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
plot(err_rate)
xtable(err_rate)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.apts$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:20){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
xtable(err_rate)
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built,latitude, longitude)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.apts$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
attach(ma.apts)
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.apts$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:20){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
xtable(err_rate)
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built,latitude, longitude)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.apts$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
xtable(err_rate)
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
ma.knn <- cbind(log.price,latitude, longitude)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.apts$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.apts$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
tr[1]
tr[1,]
tr
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
ma.knn <- cbind(log.price,latitude, longitude)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.knn$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
xtable(err_rate)
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
ma.knn <- cbind(log.price,latitude, longitude, neighborhood,log.g.sqft, log.land.sqft, year.built)
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.knn$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
length(cl)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
length(training_set)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
length(Tr)
length(tr)
dim(tr)
dim(training_set)
length(training_set)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.knn$neighborhood[training_set]
cl <- ma.knn$neighborhood[training_set,]
tr <- ma.knn[training_set, ] #split training off
cl <- ma.knn$neighborhood[training_set]
cl <- as.data.frame(ma.knn)$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
attach(ma.knn)
ma.knn <- as.data.frame(cbind(log.price,latitude, longitude, neighborhood,log.g.sqft, log.land.sqft, year.built))
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- as.data.frame(ma.knn)$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
a.knn <- as.data.frame(cbind(log.price,latitude, longitude))
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- as.data.frame(ma.knn)$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
ma.knn <- as.data.frame(cbind(log.price,latitude, longitude))
ma.knn <- as.data.frame(cbind(log.price,latitude, longitude))
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- as.data.frame(ma.knn)$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
xtable(err_rate)
ma.knn <- as.data.frame(cbind(log.price,latitude, longitude))
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- as.data.frame(ma.knn)$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
dim(tst)
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
dim(tr)
length(class)
length(cl)
cl <- ma.knn$neighborhood[training_set]
length(cl)
ma.knn$neighborhood
attach(ma.knn)
#ma.knn <- as.data.frame(cbind(log.price,latitude, longitude, neighborhood,log.g.sqft, log.land.sqft, year.built))
ma.knn <- as.data.frame(cbind(log.price, latitude, longitude, neighborhood))
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.knn$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:30){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:30),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
for (k in 1:10){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
xtable(err_rate)
err_rate <- NULL
for (k in 1:10){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
xtable(err_rate)
attach(ma.knn)
ma.knn <- as.data.frame(cbind(log.price/log.g.sqft, neighborhood latitude, longitude))
ma.knn <- as.data.frame(cbind((log.price/log.g.sqft), neighborhood latitude, longitude))
ma.knn <- as.data.frame(cbind((log.price/log.g.sqft), neighborhood, latitude, longitude))
colnames(ma.knn)
attach(ma.apts)
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built)
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
View(ma.knn)
ma.knn <- as.data.frame(cbind(log.price/log.g.sqft,neighborhood, latitude, longitude)
ma.knn <- as.data.frame(cbind(log.price/log.g.sqft,neighborhood, latitude, longitude))
attach(ma.apts)
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built)
rm(list=setdiff(ls(), "saved"))
ma <- saved
ma <- saved
#########################################################################
# Cleaning up the Formatting
#########################################################################
names(ma) <- tolower(names(ma)) #changing to lowercase
ma$sale.price.n<- as.numeric(gsub("[^[:digit:]]","",ma$sale.price)) #making sale price only digits
## clean/format the data with regular expressions
ma$gross.sqft <- as.numeric(gsub("[^[:digit:]]","",ma$gross.square.feet)) #leaving only digits
ma$land.sqft <- as.numeric(gsub("[^[:digit:]]","",ma$land.square.feet)) # leaving only digits
ma$sale.date <- as.Date(ma$sale.date)
ma$year.built <- as.numeric(as.character(ma$year.built))
## do a bit of exploration to make sure there's not anything weird going on with sale prices
#-------------------------------------------------------------------------
#########################################################################
# Exploring the data
#########################################################################
# we have some intution that the sale price should be related the square footage
attach(ma)
hist(sale.price.n) # shows that we need adjustments
hist(sale.price.n[sale.price.n>0])
hist(gross.sqft[sale.price.n==0])
ma.samp1 <- subset(ma,sale.price.n>0 & sale.price.n <8000000)
hist(ma.samp1$sale.price.n)
hist(ma.samp1$gross.sqft)
ma.samp2 <- subset(ma,sale.price.n>0 & sale.price.n <8000000 & gross.sqft>0 & gross.sqft<200000)
hist(ma.samp2$sale.price.n)
hist(ma.samp2$gross.sqft)
detach(ma)
#-------------------------------------------------------------------------
#########################################################################
# Subsetting the data to prepare a data set for regression analysis
#########################################################################
## keep only the actual cash sales where more than $20,000 is exchanged
ma.sale <- ma[ma$sale.price.n>20000,]
plot(ma.sale$gross.sqft,ma.sale$sale.price.n)
# there seems to be extreme values, orders of mag higher, so we instead look at the log
plot(log(ma.sale$gross.sqft),log(ma.sale$sale.price.n))
#figure out some way to limit our data so we are comparing like to like buildings
summary(ma.sale$building.class.category)
#we chose only the first 13 categories - residential buildings and get rid of some abbirations in hotels
levels(ma.sale$building.class.category)[1:13]
ma.apts <- NULL
for (i in 1:13){
term <- as.character(levels(ma.sale$building.class.category)[i])
if (i ==1){
ma.apts <- ma.sale[which(grepl(term,ma.sale$building.class.category)),]
}
else{
ma.apts <- rbind(ma.apts, ma.sale[which(grepl(term,ma.sale$building.class.category)),])
}
}
plot(ma.apts$gross.sqft,ma.apts$sale.price.n)  # again, it would probably be good to plot the log
plot(log(ma.apts$gross.sqft),log(ma.apts$sale.price.n))
ma.apts[which(ma.apts$sale.price.n<100000),][order(ma.apts[which(ma.apts$sale.price.n<100000),]$sale.price.n),]
## remove outliers that seem like they weren't actual sales
2.7182818284^12
ma.apts$outliers <- (log(ma.apts$sale.price.n) <=12) + 0
# the cutoff is about $162,754... it's manhattan, that's reasonable
ma.apts <- ma.apts[which(ma.apts$outliers==0),]
#If we want to take out sale prices more than 65 million -
# I decided to... this will take out leverage points and lower my R^2 though
#2.7182818284^18
ma.apts$outliers <- (log(ma.apts$sale.price.n) >=18) + 0
ma.apts <- ma.apts[which(ma.apts$outliers==0),]
#Get rid of the size ourliers as well sqrft < about 1000, so the really tiny homes
ma.apts$outliers <- (log(ma.apts$gross.sqft)<=7) + 0
ma.apts <- ma.apts[which(ma.apts$outliers==0),]
ma.apts$outliers <- (log(ma.apts$gross.sqft)>=12) + 0
ma.apts <- ma.apts[which(ma.apts$outliers==0),]
ma.apts <- ma.apts[which(ma.apts$land.sqft!=0),]
attach(ma.apts)
ma.knn <- cbind(log.price, log.g.sqft, log.land.sqft, year.built)
ma.knn <- cbind(log.price, ma.apts$land.square.feet, log.land.sqft, year.built)
ma.knn <- cbind(ma.apts$log.price, ma.apts$land.square.feet, ma.apts$log.land.sqft, ma.apts$year.built)
View(ma.knn)
attach(ma.knn)
attach(ma.knn)
ma.knn <- as.data.frame(cbind(ma.apts$log.price, ma.apts$land.square.feet, ma.apts$log.land.sqft, ma.apts$year.built))
View(ma.knn)
attach(ma.apts)
ma.knn <- as.data.frame(cbind(ma.apts$log.price, ma.apts$land.square.feet, ma.apts$log.land.sqft, ma.apts$year.built))
rm(ma.knn)
ma.knn <- as.data.frame(cbind(ma.apts$log.price, ma.apts$land.square.feet, ma.apts$log.land.sqft, ma.apts$year.built))
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built))
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, neighborhood))
attach(ma.apts)
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, neighborhood))
attach(ma.knn)
ma.knn <- as.data.frame(cbind(log.price/log.g.sqft,neighborhood, latitude, longitude))
View(ma.knn)
attach(ma.apts)
rm(ma.knn)
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, neighborhood))
View(ma.knn)
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, ma.apts$neighborhood))
View(ma.sale)
View(ma.knn)
ma.apts$neighborhood
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, as.character(ma.apts$neighborhood)))
View(ma.knn)
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, as.character(neighborhood)))
View(ma.knn)
ma.knn$neighborhood <- ma.knn$V5
ma.knn$V5 <-NULL
View(ma.knn)
ma.knn <- as.data.frame(cbind(log.price/log.g.sqft, neighborhood, latitude, longitude))
View(ma.knn)
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, as.character(neighborhood)))
attach(ma.apts)
ma.knn <- as.data.frame(cbind(log.price, land.square.feet, log.land.sqft, year.built, as.character(neighborhood)))
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
#HERE USING GEOLOCATION DATA   -  This code is mostly copied and pasted from the lab session code
require(gdata)
require(geoPlot)
addresses <- ma.apts$address
query <- unique(addresses)
attach(ma.apts)
ma.apts$address.noapt <- gsub("[,][[:print:]]*","",gsub("[ ]+"," ",trim(ma.apts$address)))
mt_add <- unique(data.frame(ma.apts$address.noapt,ma.apts$zip.code,stringsAsFactors=FALSE))
names(mt_add) <- c("address.noapt","zip.code")
#find duplicate addresses with different zip codes
# remove them
n_add <- dim(mt_add)[1]
# sample 500 addresses so we don't run over our Google Maps API daily limit (and so we're not waiting forever)
n_sample <- dim(mt_add)[1]
add_sample <-mt_add
add_sample[3,]
ma.apts[3,]
# first, try a query with the addresses we have
query_list <- addrListLookup(data.frame(1:n_sample,add_sample$address.noapt,rep("NEW YORK",times=n_sample),rep("NY",times=n_sample),add_sample$zip.code, rep("US",times=n_sample)))[,1:4]
query_list$matched <- (query_list$latitude != 0)
unmatched_inds <- which(!query_list$matched)
unmatched <- length(unmatched_inds)
# try changing EAST/WEST to E/W
query_list[unmatched_inds,1:4] <- addrListLookup(data.frame(1:unmatched,gsub(" WEST "," W ",gsub(" EAST "," E ",add_sample[unmatched_inds,1])),rep("NEW YORK",times=unmatched), rep("NY",times=unmatched),add_sample[unmatched_inds,2],rep("US",times=unmatched)))[,1:4]
query_list$matched <- (query_list$latitude != 0)
unmatched_inds <- which(!query_list$matched)
unmatched <- length(unmatched_inds)
# try changing STREET/AVENUE to ST/AVE
query_list[unmatched_inds,1:4] <- addrListLookup(data.frame(1:unmatched,gsub(" WEST "," W ",gsub(" EAST "," E ",gsub(" STREET"," ST",gsub(" AVENUE"," AVE",add_sample[unmatched_inds,1])))),rep("NEW YORK",times=unmatched), rep("NY",times=unmatched),add_sample[unmatched_inds,2],rep("US",times=unmatched)))[,1:4]
query_list$matched <- (query_list$latitude != 0)
unmatched_inds <- which(!query_list$matched)
unmatched <- length(unmatched_inds)
# have the geoloc data, rerun knn
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
attach(ma.knn)
#ma.knn <- as.data.frame(cbind(log.price,latitude, longitude, neighborhood,log.g.sqft, log.land.sqft, year.built))
ma.knn <- as.data.frame(cbind(log.price/log.g.sqft, neighborhood, latitude, longitude))
train <- .8
set.seed(2200)
training_set <- sample(1: (nrow(ma.knn)*train)) # sample
tr <- ma.knn[training_set, ] #split training off
cl <- ma.knn$neighborhood[training_set]
tst <- ma.knn[-training_set, ] #split all items not in training into testing
err_rate <- NULL
for (k in 1:10){
pred <- knn(train=tr,test=tst, cl=cl, k=k)
err_rate[k] <- length(which((ma.knn$neighborhood[-training_set]!=pred)))/length(pred)
}
err_rate.df <- cbind(c(1:10),err_rate)
err_rate <-as.data.frame(err_rate)
err_rate
xtable(err_rate)
tst
ma.knn$neighborhood
cl
ma.knn <- cbind(ma.apts[which(query_list$matched==TRUE),],
query_list[which(query_list$matched==TRUE),])
ma.knn$neighborhood
map_coords<- as.data.frame(cbind(ma.knn$neighborhood[-training_set],ma.knn$latitude[-training_set],ma.knn$longitude[-training_set]))
geoPlot(map_coords,zoom=12,color=map_coords$neighborhood)
map_coords<- as.data.frame(cbind(c(1:length(ma.knn$neighborhood[-training_set])),ma.knn$neighborhood[-training_set],ma.knn$latitude[-training_set],ma.knn$longitude[-training_set]))
geoPlot(map_coords,zoom=12,color=map_coords$neighborhood)
geoPlot(map_coords,zoom=12,color=map_coords$neighborhood)
View(map_coords)
colnames(map_coords) <- c("poorly-designed-package", "neighborhood", "latitude","longitude")
map_coords<- as.data.frame(cbind(c(1:length(ma.knn$neighborhood[-training_set])),as.character(ma.knn$neighborhood[-training_set]),ma.knn$latitude[-training_set],ma.knn$longitude[-training_set]))
colnames(map_coords) <- c("poorly-designed-package", "neighborhood", "latitude","longitude")
View(map_coords)
geoPlot(map_coords,zoom=12,color=map_coords$neighborhood)
typeof(map_coords$latitude)
map_coords<- as.data.frame(cbind(c(1:length(ma.knn$neighborhood[-training_set])),as.character(ma.knn$neighborhood[-training_set]),as.numeric(ma.knn$latitude[-training_set]),as.numeric(ma.knn$longitude[-training_set]))
map_coords<- as.data.frame(cbind(c(1:length(ma.knn$neighborhood[-training_set])),as.character(ma.knn$neighborhood[-training_set]),as.numeric(ma.knn$latitude[-training_set]),as.numeric(ma.knn$longitude[-training_set])))
map_coords<- as.data.frame(cbind(c(1:length(ma.knn$neighborhood[-training_set])),as.character(ma.knn$neighborhood[-training_set]),as.numeric(ma.knn$latitude[-training_set]),as.numeric(ma.knn$longitude[-training_set])))
colnames(map_coords) <- c("poorly-designed-package", "neighborhood", "latitude","longitude")
typeof(map_coords$latitude)
geoPlot(map_coords,zoom=12,color=map_coords$neighborhood)
View(map_coords)
map_coords2<- as.data.frame(cbind(c(1:length(ma.knn$neighborhood[-training_set])),ma.knn$neighborhood[-training_set],as.numeric(ma.knn$latitude[-training_set]),as.numeric(ma.knn$longitude[-training_set])))
colnames(map_coords2) <- c("poorly-designed-package", "neighborhood", "latitude","longitude")
geoPlot(map_coords2,zoom=12,color=map_coords$neighborhood)
